# Author: Aaron Yerke (aaronyerke@gmail.com)
# Main snakemake file for running and re-running scripts
print("In snakefile.")
configfile: "workflow/config/config.yaml"
# print(config)
import os
import pandas as pd

print("Loading functions")
def get_column_names(df_path):
    df = pd.read_csv(os.path.join(df_path), sep=",", header=0)
    print("Get col names")
    print(df.columns.values)
    return df.columns.values

diet_df = pd.read_csv(os.path.join(".","Data", "diet", "diet_test_rf.csv"), \
		sep=",", header=0)

# test_diets = [os.path.join("Data", "diet", x) for x in expand("{test_column}", diet=config["test_diets"])]
# print(test_diets)
test_diets = expand("Data/diet/{diet}", diet=diet_df.loc[:,"Diet_orgs"])
print(test_diets)
epochs = ["2015", "2009-2020"]
# Wildcards can be {diet},{epoch},{transform},{test_col}
# Data types can be "_data" for randome forest output

output_subdir="diet_test_d1d2"
rule diet_org_comparison:
    conda:
        "env/python_conda_env.yml"
    params:
        output_subdir=output_subdir
    input: 
        os.path.join("output","diet_test_d1d2","tables","cat_grams_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","cat_simple_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","food_simple_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","food_grams_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nut_cat_simple_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nut_cat_grams_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nutr_food_cat_g_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nutr_food_cat_simp_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nutr_food_grams_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nutri_food_simple_d1d2_data.csv"),
        os.path.join("output","diet_test_d1d2","tables","nutri_only_d1d2_data.csv"),
    output:
        os.path.join("output","diet_test_d1d2", "graphics", "all_diet_orgs.pdf")
    shell:
        """
        python --version
        Rscript lib/scripts/fig/diet_org_test_figure.R -o {params.output_subdir}
        """
checkpoint create_test_rf_dataset:
    output: 
        pred = "Data/unit_test/mtc_predictor.csv",
        resp = "Data/unit_test/mtc_response.csv"
    # conda:"env/python_conda_env.yml",
    shell:
        """
        Rscript lib/scripts/unit_test/make_rf_test_dfs.R
        """

rule aggregate_test_rf_feature_data:
    input: expand("output/unit_test/1c{test_column}?rf_test_data.csv", test_column=get_column_names(checkpoints.create_test_rf_dataset.output.resp))
    run:
        print("expand_test_rest_colnames")
        for i in {input}:
            print("i")

rule rf_test_dataset:
    input:
        pred = checkpoints.create_test_rf_dataset.output.pred,
        resp = checkpoints.create_test_rf_dataset.output.resp,
    output:
        "output/unit_test/1c{test_column}?rf_test_data.csv"
    shell:
        """
            echo {wildcards.test_column}
            mkdir -p output/unit_test
            python lib/scripts/ml/rf-resp_df.py \
                    --response_fn {input.resp} \
                    --delimeter , \
                    --pred_path {input.pred} \
                    --out_folder unit_test \
                    --output_label rf_test \
                    --title rf_test_"{wildcards.test_column}" \
                    --response_col "{wildcards.test_column}" \
                    --
                """
    
            
# rule NAME:
#     input: "path/to/inputfile", "path/to/other/inputfile"
#     output: "path/to/outputfile", somename = "path/to/another/outputfile"
#     run:
#         for f in input:
#             ...
#             with open(output[0], "w") as out:
#                 out.write(...)
#         with open(output.somename, "w") as out:
#             out.write(...)

rule create_diets:
    conda:"env/python_conda_env.yml",
    input:
        script = os.path.join( "lib","scripts","data_org","import_org_diet.R"),
        food_codes = os.path.join("Data", "diet", "WWEIA1516_foodcat_FNDDS.xlsx"),
    output:
        "Data/diet/d1d2_nutr_only_2015.csv",
        "Data/diet/d1d2_food_g_2015.csv",
        "Data/diet/d1d2_nutri_food_g_2015.csv",
        "Data/diet/d1d2_food_2015.csv",
        "Data/diet/d1d2_nutri_food_2015.csv",
        "Data/diet/d1d2_cat_g_2015.csv",
        "Data/diet/d1d2_nutri_cat_g_2015.csv",
        "Data/diet/d1d2_cat_2015.csv",
        "Data/diet/d1d2_nutri_cat_2015.csv",
        "Data/diet/d1d2_nutri_food_g_cat_g_2015.csv",
        "Data/diet/d1d2_nutri_food_cat_2015.csv",
    resources:
        runtime=240 #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    shell:
        """
        Rscript {input.script}
        """

rule create_resp_var_table_2015:
    conda:"env/python_conda_env.yml",
    input:
        os.path.join("Data","respns_vars", "response_features_tables.csv")
    output:
        os.path.join("Data","respns_vars", "cardio_respns_vars.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    shell:
        """
        Rscript ./lib/scripts/data_org/organize_resp_vars.R
        """

rule rf_cardio_cat_g:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_cat_g_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    conda:"python_conda_env.yml",
    output:
        os.path.join("output","diet","tables","cat_grams_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_cat_grams.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_cat_g_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label cat_grams_d1d2 \
            --title cat_grams
        """
rule rf_cardio_cat:
    conda:"python_conda_env.yml"
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_cat_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","cat_simp_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_cat_simp.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_cat_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label cat_simple_d1d2 \
            --title cat_simple
        """
rule rf_cardio_food_simp:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_food_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","food_simple_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_food_simple.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_food_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label food_simple_d1d2 \
            --title food_simple
        """
rule rf_cardio_food_g:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_food_g_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","food_grams_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_food_grams.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_food_g_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label food_grams_d1d2 \
            --title food_grams
        """
rule rf_cardio_nut_cat:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutri_cat_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","nut_cat_simple_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nut_cat_simple.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutri_cat_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nut_cat_simple_d1d2 \
            --title nut_cat_simple
        """
rule rf_cardio_nut_cat_g:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutri_food_g_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","nut_cat_grams_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nut_cat_grams.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutri_cat_g_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nut_cat_grams_d1d2 \
            --title nut_cat_grams
        """

rule rf_cardio_nut_food_cat_g:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutri_food_g_cat_g_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","nutr_food_cat_g_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nutr_food_cat_g.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutri_food_g_cat_g_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nutr_food_cat_g \
            --title nutr_food_cat_g
        """
rule rf_cardio_nut_food_cat_simp:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutri_food_cat_2015.csv")
    resources: 
    output:
        os.path.join("output","diet","tables","nutr_food_cat_simp_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nutr_food_cat_simp.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutri_food_cat_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nutr_food_cat_simp_d1d2 \
            --title nutr_food_cat_simp
        """
rule rf_cardio_nut_food_g:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutri_food_g_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","nutr_food_grams_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nutr_food_grams.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutri_food_g_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nutr_food_grams_d1d2 \
            --title nutri_food_grams
        """
rule rf_cardio_nut_food_simp:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutri_food_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","nutri_food_simple_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nutri_food_simple.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutri_food_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nutri_food_simple_d1d2 \
            --title nutri_food_simple
        """
rule rf_cardio_nut_only:
    input:
        resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
        diet_data = os.path.join("Data","diet", "d1d2_nutr_only_2015.csv")
    resources:
        runtime="24:00:00" #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
    output:
        os.path.join("output","diet","tables","nutri_only_data.csv"),
        os.path.join("output", "diet", "tables", "ave_feat_imp_nutri_only.csv")
    shell:
        """
        python lib/scripts/ml/rf-resp_df.py \
            --response_fn Data/respns_vars/cardio_respns_vars.csv \
            --delimeter , \
            --pred_path Data/diet/d1d2_nutr_only_2015.csv \
            --out_folder diet_test_d1d2 \
            --output_label nutri_only_d1d2 \
            --title nutri_only
        """
