# Author: Aaron Yerke (aaronyerke@gmail.com)
# Main snakemake file for running and re-running scripts
# Wildcards can be {diet},{epoch},{transform},{test_column}
# Data types can be "_data" for random forest output
# run using "snakemake --profile workflow/config"

configfile: "workflow/config/config.yaml"

import os
import pandas as pd
from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("8.9.0")

# Create constants
epochs = ["2015", "2009_2020"]
days = ["d1", "d1d2"]
transformations = ["", "_LOG", "_SCALE"]
diet_project_prefix = ["", "mb-"]
diet_orgs = ["nutr_only","food_g","nutri_food_g","food", "nutri_food","cat_g",\
"nutri_cat_g","cat","nutri_cat","nutri_food_g_cat_g","nutri_food_cat"]
diet_orgs_no_cat = ["nutr_only","food_g","nutri_food_g"]
response_cols = ["Respondent sequence number","Total Cholesterol (mg/dL",
	"Triglyceride (mg/dL","LDL-cholesterol (mg/dL","Direct HDL-Cholesterol (mg/dL",
	"Systolic_mean","Systolic_hypertension","Diastolic_mean","Diastolic_hypertension",
	"hypertension_either","unhealthy_tot_chol","unhealthy_trig","unhealthy_ldl",
	"unhealthy_hdl"
	]
response_cols_10y = ["Respondent sequence number","Total Cholesterol (mg/dL",
	"Triglyceride (mg/dL","LDL-cholesterol (mg/dL","Direct HDL-Cholesterol (mg/dL",
	"Systolic_mean","Systolic_hypertension","Diastolic_hypertension",
	"hypertension_either","unhealthy_tot_chol","unhealthy_trig","unhealthy_ldl",
	"unhealthy_hdl"
	]
output_subdir="diet_test_d1d2"

rule complete:
	input:
		# expand("output/proper_days/tables/{diet_org}-d1-2015_scores.csv", diet_org=diet_orgs),
		# expand("output/proper_days/tables/{diet_org}-d1d2-2015_scores.csv", diet_org=diet_orgs),
		# expand("Data/diet/d1_{diet_org}_2015.csv", diet_org=diet_orgs),
		# expand("Data/diet/helper_d1d2_{diet_org}_2015.csv", diet_org=diet_orgs),
		# os.path.join("output","proper_days", "graphics", "all_diet_orgs_days.pdf"),
		expand("output/proper_days_2009_2020/tables/1col{respns_column_10y}!pd_2009_2020_scores.csv", respns_column_10y=response_cols),
		# expand("output/2015_d1_nut_cat/tables/1col{respns_column}!2015_d1_nut_cat_scores.csv", respns_column=response_cols)

rule build_2009_2020_bodyweight_resp:
	conda:"env/python_conda_env.yml"
	input:"lib/datasets/body_weight_2009-2020.csv"
	output:"Data/exam/body_weight_2009-2020.csv"
	shell:
		"""
		Rscript lib/scripts/data_org/import_org_from_dataset_file.R\
			--out_subdir exam\
			--infile {input[0]}\
			--outfile {output[0]}
		"""

rule build_2009_2020_helper_features:
	conda:"env/python_conda_env.yml"
	input:"lib/datasets/helper_features_2009-2020.csv"
	output:"Data/demo/helper_features_2009-2020.csv"
	shell:
		"""
		Rscript lib/scripts/data_org/import_org_from_dataset_file.R\
			--out_subdir demo\
			--infile {input[0]}\
			--outfile {output[0]}
		"""

rule build_2009_2020_CVD_drug_features:
	conda:"env/python_conda_env.yml"
	input:"lib/datasets/CVD_drugs_2009-2020.csv"
	output:"Data/drug/CVD_drugs_2009-2020.csv"
	shell:
		"""
		module load miniconda
		Rscript lib/scripts/data_org/import_org_from_dataset_file.R\
			--out_subdir drug\
			--infile {input[0]}\
			--outfile {output[0]}
		"""

rule build_2009_2020_demo:
	conda:"env/python_conda_env.yml"
	input:"lib/datasets/demo_2009_2020.csv"
	output:"Data/demo/demo_2009-2020.csv"
	shell:
		"""
		Rscript lib/scripts/data_org/org_2009-2020_demo.R
		"""

checkpoint create_diets_d1_2015:
	conda:"env/python_conda_env.yml",
	input:
		food_codes = os.path.join("Data", "diet", "WWEIA1516_foodcat_FNDDS.xlsx"),
	output:
		expand("Data/diet/{day}-{diet_org}-2015.csv", diet_org=diet_orgs, day="d1")
	resources:
		runtime=240, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem_mb="16gb"
	shell:
		"""
		Rscript lib/scripts/data_org/import_org_diet_day1_only_ts.R
		"""

rule create_diets_d1d2_2015:
	conda:"env/python_conda_env.yml",
	output:
		expand("Data/diet/{day}-{diet_org}-2015.csv", diet_org=diet_orgs, day="d1d2"),
	resources:
		runtime=240, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="16gb"
	shell:
		"""
		Rscript lib/scripts/data_org/import_org_diet_2015_d1d2.R
		"""

rule help_drugs_2009_2020:
	conda:"env/python_conda_env.yml"
	input:
		# aggregate_input,
		drug = "Data/drug/CVD_drugs_2009-2020.csv",
		helper = "Data/demo/helper_features_2009-2020.csv"
	output: "Data/drug/helper_drugs_2009-2020.csv"
	resources:
		runtime=60, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="16gb"
	shell:
		"""
		Rscript lib/scripts/data_org/combine_2_csv.R\
			--first_path {input.drug}\
			--secnd_path {input.helper}\
			--out_path {output}
		"""

rule help_diets_2015:
	conda:"env/python_conda_env.yml"
	input:
		diet_org = "Data/diet/{day}-{diet_org}-2015.csv",
		helper = "Data/demo/helper_features_2009-2020.csv"
	output: "Data/diet/helper-{day}-{diet_org}-2015.csv"
	resources:
		runtime=60, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="16gb"
	shell:
		"""
		Rscript lib/scripts/data_org/combine_2_csv.R\
			--first_path {input.diet_org}\
			--secnd_path {input.helper}\
			--out_path {output}
		"""		

checkpoint create_resp_var_table_2015:
	conda: "env/python_conda_env.yml",
	input:
		"lib/datasets/response_features_tables.csv"
	output:
		os.path.join("Data","respns_vars", "cardio_respns_vars.csv")
	resources:
		runtime=60
	shell:
		"""
		Rscript lib/scripts/data_org/organize_response_vars.R
		"""

rule rand_forest_2015_VS_cardio_features:
	conda:"env/python_conda_env.yml",
	input:
		resp_var = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
		diet_data = "Data/diet/helper-{day}-{diet_org}-2015.csv"
	output:
		"output/proper_days/tables/{diet_org}-{day}-2015_scores.csv",
	resources:
		runtime=8000, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="200gb",
		partition="medium"
	shell: 
		"""
		echo {wildcards.diet_org}
		python lib/scripts/ml/rf-resp_df.py \
			--response_fn {input.resp_var} \
			--delimeter , \
			--pred_path {input.diet_data} \
			--out_folder proper_days \
			--output_label {wildcards.diet_org}-{wildcards.day}-2015
		"""

rule diet_org_2015_comparison:
	conda:
		"env/python_conda_env.yml"
	params:
		output_subdir="proper_days",
		r_script="lib/scripts/fig/diet_org_day_compare.R"
	input:
		expand("output/proper_days/tables/{diet_org}-{day}-2015_scores.csv", diet_org=diet_orgs, day=days)
	output:
		os.path.join("output","proper_days", "graphics", "all_diet_orgs_days.pdf")
	resources:
		runtime=60, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="20gb"
	shell:
		"""
		python --version
		Rscript {params.r_script} -o {params.output_subdir}
		"""

checkpoint create_resp_2009_2020_dataset:
	conda:"env/python_conda_env.yml",
	resources:
		runtime=900, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem_mb=50000,
	output:
		"Data/respns_vars/2009-2020cardio_respns_vars.csv"
	shell:
		"""
		echo $PWD
		Rscript "lib/scripts/data_org/org_multi_yr_resp_vars.R"
		"""

rule create_nutri_cat_g_2009_2020:
	conda:"env/python_conda_env.yml",
	input:
		script = os.path.join( "lib","scripts","data_org","import_org_2009_2020_nutri_cat_only.R"),
	output:
		"Data/diet/multi_year/all_days-nutri_cat_g-2009_2020.csv"
	resources:
		runtime=900, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem_mb=90000,
	shell:
		"""
		Rscript {input.script}
		"""

rule help_nutri_cat_2009_2020:
	conda:"env/python_conda_env.yml"
	input:
		diet_org = "Data/diet/multi_year/all_days-nutri_cat_g-2009_2020.csv",
		helper = "Data/drug/helper_drugs_2009-2020.csv"
	output: "Data/diet/multi_year/helper_CVD-all_days-nutri_cat_g-2009_2020.csv"
	resources:
		runtime=60, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="16gb"
	shell:
		"""
		Rscript lib/scripts/data_org/combine_2_csv.R\
			--first_path {input.diet_org}\
			--secnd_path {input.helper}\
			--out_path {output}
		"""	

rule rnd_frst_10_yr_nut_cat_VS_CVD:
	conda:"env/python_conda_env.yml",
	input:
		resp = "Data/respns_vars/2009-2020cardio_respns_vars.csv",
		pred = "Data/diet/multi_year/helper_CVD-all_days-nutri_cat_g-2009_2020.csv"
	output:
		"output/proper_days_2009_2020/tables/1col{respns_column_10y}!pd_2009_2020_scores.csv",
		"output/proper_days_2009_2020/graphics/1col{respns_column_10y}!pd_2009_2020_feat_import.pdf"
	resources:
		runtime=30240, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		# mem="120gb",
		# disk_mb=50000,
		partition="long",
		# runtime=8000, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="200gb",
		# partition="medium"
	shell: 
		"""
		which python
		python lib/scripts/ml/rf-resp_df.py \
				--response_fn {input.resp} \
				--delimeter , \
				--pred_path {input.pred} \
				--out_folder proper_days_2009_2020_beeswarm \
				--output_label pd_2009_2020 \
				--title pd_2009_2020 \
				--response_col {wildcards.respns_column_10y:q}
		"""

rule rnd_frst_2015_d1_nut_cat_VS_CVD:
	conda:"env/python_conda_env.yml",
	input:
		resp = os.path.join("Data","respns_vars", "cardio_respns_vars.csv"),
		pred = "Data/diet/helper-d1-nutri_cat_g-2015.csv"
	output:
		"output/2015_d1_nut_cat/tables/1col{respns_column}!2015_d1_nut_cat_scores.csv",
		"output/2015_d1_nut_cat/graphics/1col{respns_column}!2015_d1_nut_cat_feat_import.pdf"
	resources:
		runtime=8000, #format: M, M:S, H:M:S, D-H, D-H:M, or D-H:M:S
		mem="250gb",
		partition="medium"
	shell: 
		"""
		which python
		python lib/scripts/ml/rf-resp_df.py \
				--response_fn {input.resp} \
				--delimeter , \
				--pred_path {input.pred} \
				--out_folder 2015_d1_nut_cat \
				--output_label 2015_d1_nut_cat \
				--title 2015_d1_nut_cat \
				--response_col {wildcards.respns_column:q}
		"""

# def get_2015_resp_features(wildcards):
#     df_path = checkpoints.create_resp_var_table_2015.get(**wildcards).output[0]
#     df = pd.read_csv(df_path, sep=",", header=0)
#     return df.columns.values

# rule aggregate_2015_rf_resp_features:
#     input: get_2015_resp_features
#     output: "output/proper_days/tables/rf_test_scores.csv"
#     shell:
#         """
#         Rscript --out_subdir diet_d1d2_2015 --fn_root {wildcards.diet_org_no_cat:q}_2015
#         """

# def get_2009_2020_rf_resp_features(wildcards):
# 	df_path = checkpoints.create_resp_2009_2020_dataset.get(**wildcards).output[1]
# 	df = pd.read_csv(df_path, sep=",", header=0)
# 	return expand("output/diet_test_d1d2/tables/1c{resp_col_2009_2020}?{diet_org_no_cat}_2009-2020_scores.csv", \
# 	zip, resp_col_2009_2020=df.columns.values, diet_org_no_cat=diet_orgs_no_cat)

# rule get_2009_2020_rf_resp_features:
# 	input: get_2009_2020_rf_resp_features

# rule aggregate_2009_2020_rf_data:
# 	input: rules.get_test_rf_resp_features.input[0]
# 	output: expand("output/diet_test_d1d2/tables/{diet_org_no_cat}_2009-2020_scores.csv", diet_org_no_cat=diet_orgs_no_cat)
# 	shell:
# 		"""
# 		Rscript lib/scripts/data_org/combine_rf_data.R --out_subdir diet_2009-2020\
# 			--fn_root {wildcards.diet_org_no_cat:q}_2009-2020
# 		"""

# def get_2015_resp_features(wildcards):
#     df_path = checkpoints.create_resp_var_table_2015.get(**wildcards).output[0]
#     df = pd.read_csv(df_path, sep=",", header=0)
#     return expand("output/unit_test/tables/1c{resp_2015}?rf_test_scores.csv", resp_2015=df.columns.values)

# rule aggregate_2015_rf_resp_features:
#     input: get_2015_resp_features
#     output: "output/unit_test/tables/rf_test_scores.csv"
#     shell:
#         """
#         Rscript --out_subdir diet_d1d2_2015 --fn_root {wildcards.diet_org_no_cat:q}_2015
#         """

